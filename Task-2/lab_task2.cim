! Recommended compiler:         emacs                                                         ;
! Compile with extended memory: cim -m500 lab_task2.cim                                       ;
! Run compiled program:         ./lab_task2                                                   ;
! Run compiled program to file: ./lab_task2 > delay_output.csv  || ./lab_task2 > output.txt   ;

begin
  external class demos="../demos.atr";
  demos
  begin

    !!!!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! DEFINE VARIABLES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Task Specific Variables !! ;
    integer Tc  = 0.1;
    integer Trc = 2;
    integer lambdaFC = (1 / 1);

    integer Ts  = 2;
    integer Trs = 1;
    integer lambdaFS = (1 / 1);

    integer numberofruns = 10000;
    long real lambda = ((1000 / 1) / 1000);

    integer numberofservers;

    long real totalFailTime;


    !! DEMOS Variables !! ;
    ref (RDist) generatorIntensity_;
    ref (RDist) controllerFailureIntensity_;
    ref (RDist) serverFailureIntensity_;
    ref (Bin) bin_;
    ref (Count) numberOfFails_;
    ref (CondQ) active_;
    ref (CondQ) failing_;


    !!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! ENTITY CLASSES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Entity: ServerFailure !! ;
    Entity class ServerFailure;
    begin
      integer i;
      integer size;

      for i:= 1 step 1 until numberofruns do
        begin
          hold(serverFailureIntensity_.sample);

          size := bin_.avail;

                                                                                !if size <= 0 then begin
                                                                                  !outtext("Server failed");
                                                                                  !outimage;
                                                                                !end;

          if size ne 0 then begin
            bin_.take(1);
          end;

          numberofservers := numberofservers - 1;
          hold(Trs);
          bin_.give(1);
          numberofservers := numberofservers + 1;
        end;
    end;


    !! Entity: ControllerFailure !! ;
    Entity class ControllerFailure;
    begin
      integer i;
      integer j;
      integer k;
      integer size2;
      integer size3;
      integer size8;
      integer test;

      for i:= 1 step 1 until numberofruns do
        begin
          hold(controllerFailureIntensity_.sample);

          size2 := bin_.avail;

          for j:= 1 step 1 until size2 do
            begin
              bin_.take(1);
            end;

                                                                                  !test := bin_.avail;
                                                                                  !outint(test, 0);
                                                                                  !outimage;

          hold(Trc);

          ! ISSUE, BIN IS NOT EMPTY AND NEEDS TO BE EMPTIED;
          size3 := bin_.avail;

           if size3 > 0 then
           	begin
           ! ISSUE, BIN IS NOT EMPTY AND NEEDS TO BE EMPTIED;
            	size8 := bin_.avail;
           	for j:= 1 step 1 until size8 do
	             begin
	             bin_.take(1);
            	end;
           end;

          size3 := bin_.avail;

                                                                                  ! if size3 > 0 then begin
                                                                                    ! outtext("ISSUES");
                                                                                    ! outimage;
                                                                                  ! end;
          for k:= 1 step 1 until numberofservers do
            begin
              bin_.give(1);
            end;
        end;
    end;


    !! Entity: ELHUB !! ;
    Entity class ELHUB;
    begin
      integer i;
      integer size;
      long real timestamp;
      long real timestamp2;
      long real failtime;

      for i:= 1 step 1 until numberofruns do
        begin
          hold(1);
          bin_.take(1);

          size := bin_.avail;

          !timestamp := time;
          failing_.waituntil(bin_.avail < 1);
          !timestamp2 := time;

          outint(size, 0);
          outimage;

          failtime := timestamp2 - timestamp;
          totalFailTime := totalFailTime + failtime;

          bin_.give(1);
        end;
    end;


    !!!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! VARIABLE VALUES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Packet Generator Intensity !! ;
    generatorIntensity_ :- new NegExp("Packet", lambda);

    !! Controller/Server Failure Intensity !! ;
    controllerFailureIntensity_ :- new NegExp("CFail", lambdaFC);
    serverFailureIntensity_ :- new NegExp("SFail", lambdaFS);

    !! Initiate number of servers !!;
    numberofservers := 3;

    !! Initiate bin !! ;
    bin_ :- new Bin("Bin", numberofservers);

    !! Initiate Fail Counter !! ;
    numberOfFails_ :- new Count("Num. Fails");

    !! Initiate ConditionQs !! ;
    active_ :- new CondQ("Active");
    failing_ :- new CondQ("Failing");

    !! Start Entities !! ;
    !new Generator("Generator").schedule(0);
    new ELHUB("ELHUB").schedule(0);
    new ControllerFailure("CF1").schedule(0);
    new ServerFailure("SF1").schedule(0);
    new ServerFailure("SF2").schedule(0);
    new ServerFailure("SF3").schedule(0);

    !! Force Hold Simulation Active !! ;
    hold(300000000);
  end;
end;
