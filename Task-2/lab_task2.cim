! Recommended compiler:         emacs                                                         ;
! Compile with extended memory: cim -m500 lab_task2.cim                                       ;
! Run compiled program:         ./lab_task2                                                   ;
! Run compiled program to file: ./lab_task2 > delay_output.csv  || ./lab_task2 > output.txt   ;

begin
  external class demos="../demos.atr";
  demos
  begin

    !!!!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! DEFINE VARIABLES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Task Specific Variables !! ;
    integer Tc  = 0.1;
    integer Trc = 2;
    integer lambdaFC = 0.01;

    integer Ts  = 2;
    integer Trs = 1;
    integer lambdaFS = 0.01;

    integer numberofpackets = 100000;
    long real lambda = ((1000 / 1) / 1000);

    integer numberofservers;

    !! DEMOS Variables !! ;
    ref (RDist) generatorIntensity_, controllerFailureIntensity_, serverFailureIntensity_;
    ref (Bin) bin_;
    ref (Count) numberOfFails_;


    !!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! ENTITY CLASSES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Entity: ServerFailure !! ;
    Entity class ServerFailure;
    begin
      integer size1;
      hold(serverFailureIntensity_.sample);

      size1 := bin_.avail;

      if size1 ne 0 then begin
        bin_.give(1);
      end;

      numberofservers := numberofservers - 1;
      hold(Trs);
      bin_.take(1);
      numberofservers := numberofservers + 1;
    end;


    !! Entity: ControllerFailure !! ;
    Entity class ControllerFailure;
    begin
      integer i;
      integer size2;
      hold(controllerFailureIntensity_.sample);

      size2 := bin_.avail;
      if size2 ne 0 then begin
        bin_.give(1);
      end;
      hold(Trc);

      for i:= 1 step 1 until numberofservers do
        begin
          bin_.take(1);
        end;
    end;


    !! Entity: ELHUB !! ;
    Entity class ELHUB;
    begin
      integer size = 3;
      bin_.give(1);

      !size := bin_.avail;

      if size ne 0 then begin
        numberOfFails_.update(1);
      end;
      bin_.take(1);
    end;


    !! Entity: Generator !! ;
    Entity class Generator;
    begin
      integer i;
      for i:= 1 step 1 until numberofpackets do
        begin
          new ELHUB(edit("packet",i)).schedule(now);
          hold(generatorIntensity_.sample);
        end;
    end;



    !!!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! VARIABLE VALUES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Packet Generator Intensity !! ;
    generatorIntensity_ :- new NegExp("Packet", lambda);

    !! Controller/Server Failure Intensity !! ;
    controllerFailureIntensity_ :- new NegExp("Cont. Failure", lambdaFC);
    serverFailureIntensity_ :- new NegExp("Serv. Failure", lambdaFS);

    !! Initiate bin !! ;
    bin_.take(numberofservers);

    !! Initiate Fail Counter !! ;
    numberOfFails_ :- new Count("N fails");

    !! Initiate number of servers !!;
    numberofservers := 3;

    !! Start Entities !! ;
    new Generator("Generator").schedule(0);
    new ControllerFailure("CF1").schedule(0);
    new ServerFailure("SF1").schedule(0);
    new ServerFailure("SF2").schedule(0);
    new ServerFailure("SF3").schedule(0);

    !! Force Hold Simulation Active !! ;
    hold(300000000);
  end;
end;
