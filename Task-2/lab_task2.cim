begin
  external class demos="../demos.atr";
  demos
  begin

    !!!!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! DEFINE VARIABLES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Task Specific Variables !! ;
    integer Tc  = 0.1;
    integer Trc = 2;
    integer lambdaFC = 0.01;

    integer Ts  = 2;
    integer Trs = 1;
    integer lambdaFS = 0.01;

    integer numberofruns = 100;
    long real lambda = ((1000 / 1) / 1000);

    integer numberofservers;

    long real totalFailTime;
    long real time20;

    boolean controller;


    !! DEMOS Variables !! ;
    ref (RDist) generatorIntensity_;
    ref (RDist) controllerFailureIntensity_;
    ref (RDist) serverFailureIntensity_;
    ref (RDist) serverRepairIntensity_;
    ref (RDist) controllerRepairIntensity_;
    ref (Bin) bin_;
    ref (Count) numberOfSrvFails_, processed_;
    ref (CondQ) active_;
    ref (CondQ) failing_;
    ref (Res) fredrik_servers;


    !!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! ENTITY CLASSES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!! ;

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Entity: ServerFailure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ;
    Entity class ServerFailure;
    begin
      integer size;

	LOOP:
	  
	  !size := bin_.avail;
          size := fredrik_servers.avail;
          if size ne 0 then begin
	      !bin_.take(1);
	      
	      hold(serverFailureIntensity_.sample);
	      fredrik_servers.acquire(1);
	      failing_.signal;
	      numberofservers := numberofservers - 1;
	      
	      hold(serverRepairIntensity_.sample);
	      
	      !bin_.give(1);
	      
	      if controller then begin
	      fredrik_servers.release(1);
	      failing_.signal;
	      numberofservers := numberofservers + 1;
	      end;
	      if not controller then begin
	      numberofservers := numberofservers + 1;
	      end;
          end;
	
	if size <= 0 then begin
	      hold(serverFailureIntensity_.sample);
	      numberofservers := numberofservers - 1;
	      hold(Trs);
	      numberofservers := numberofservers + 1;
        end;
        
        repeat;
        
    end;


    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Entity: ControllerFailure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ;
    Entity class ControllerFailure;
    begin
      integer j;
      integer k;
      integer size2;
      integer size3;
      integer size8;
  !    integer test;
      
	
      loop:
          controller := true;
          hold(controllerFailureIntensity_.sample);
	  controller := false;
	  !outtext ("Controller fail!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ");
         ! outimage;
          !size2 := bin_.avail;
          size2 := fredrik_servers.avail;
	  
	  
          
          for j:= 1 step 1 until size2 do
            begin
              !bin_.take(1);
              fredrik_servers.acquire(1);
              failing_.signal;
            end;




          hold(controllerRepairIntensity_.sample);
	
	  
	  
          ! ISSUE, BIN IS NOT EMPTY AND NEEDS TO BE EMPTIED;
          !size3 := bin_.avail;

           !if size3 > 0 then
           	begin
            	size3 := bin_.avail;
           !	for j:= 1 step 1 until size3 do
	             begin
	             bin_.take(1);
           ! 	end;
          ! end;

                                                                               
          for k:= 1 step 1 until (numberofservers - 1)do
            begin
              fredrik_servers.release(1);
              failing_.signal;
            end;


        repeat;
        
    end;


    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Entity: ELHUB !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ;
    Entity class ELHUB;
    begin
      integer size;
      long real timestamp;
      long real timestamp2;
      long real failtime;
    
    loop:
	processed_.update(1);
          !hold(0.1);
          !bin_.take(1);
	  failing_.waituntil(fredrik_servers.avail <= 0 ); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!;

          !size := bin_.avail;
          size := fredrik_servers.avail;

          timestamp := time;
	  
	  !outtext ("AVAIL: ");
         ! outint (size, 0);
         ! outtext (" | Time: ");
         ! outint (time, 0);
         ! outimage;
           
   !        failing_.waituntil(bin_.avail >= 1 );
   	!if size <=0 then begin;
 	failing_.waituntil(fredrik_servers.avail >= 1 ); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!;
 	timestamp2 := time;
        failtime := timestamp2 - timestamp;
        totalFailTime := totalFailTime + failtime;

	!end;



          !failing_.waituntil( controller );
          !hold (1.5);
          






          
          
	
          !bin_.give(1);
        
    repeat;
    end;


    !!!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! VARIABLE VALUES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Packet Generator Intensity !! ;
    !generatorIntensity_ :- new NegExp("Packet", lambda);

    !! Controller/Server Failure Intensity !! ;
    controllerFailureIntensity_ :- new NegExp("CFail", 0.01); !! 1/0.01  ;
    serverFailureIntensity_ :- new NegExp("SFail", 0.01); !! 1/0.01 ;
    controllerRepairIntensity_ :- new NegExp("CRep", 2); !!1/2;
    serverRepairIntensity_ :- new NegExp("SRep", 1); !!1/1;
    
    

    !! Initiate number of servers !!;
    numberofservers := 3;

    !! Initiate bin !! ;
    bin_ :- new Bin("Bin", 3);

    !! Initiate Fail Counter !! ;
    numberOfSrvFails_ :- new Count("Num. S. Fails");
    processed_ :- new Count("Processed");

    !! Initiate ConditionQs !! ;
    !active_ :- new CondQ("Active");
    failing_ :- new CondQ("Failing");
    
    
    fredrik_servers :- new Res("Fredrik Server", 3);

    !! Start Entities !! ;
    !new Generator("Generator").schedule(0);
    new ELHUB("ELHUB").schedule(0);
    new ControllerFailure("CF1").schedule(0);
    new ServerFailure("SF1").schedule(0);
    new ServerFailure("SF2").schedule(0);
    new ServerFailure("SF3").schedule(0);

    !! Force Hold Simulation Active !! ;
    hold(100000);
    time20 := time;
    outtext ("totalFailTime: ");
   outint (totalFailTime, 0);
    outtext (" | Time: ");
      outint (time20, 0);
        outimage;
  end;
end;