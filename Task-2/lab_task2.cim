! Recommended compiler:         emacs                                                         ;
! Compile with extended memory: cim -m500 lab_task2.cim                                       ;
! Run compiled program:         ./lab_task2                                                   ;
! Run compiled program to file: ./lab_task2 > delay_output.csv  || ./lab_task2 > output.txt   ;

begin
  external class demos="../demos.atr";
  demos
  begin

    !!!!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! DEFINE VARIABLES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!!!! ;

    !! Task Specific Variables !! ;
    integer Tc  = 0.1;
    integer Trc = 2;
    integer lambdaFC = 0.01;

    integer Ts  = 2;
    integer Trs = 1;
    integer lambdaFS = 0.01;

    integer numberofservers;

    long real totalFailTime;
    long real totalTime;
    long real percentage_fail;

    boolean controller;


    !! DEMOS Variables !! ;
    ref (RDist) controllerFailureIntensity_;
    ref (RDist) serverFailureIntensity_;
    ref (Res) total_servers;


    !!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! ENTITY CLASSES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!! ;

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Entity: ServerFailure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ;
    Entity class ServerFailure;
    begin
	integer size12;
	boolean test4;
	long real timerd;
	long real timere;
	long real timerf;
	LOOP:

	      test4 := false; !!Setst the boolean to false, wich means that the timer for downtime has not started;

	      hold(serverFailureIntensity_.sample);
	      
	      size12 := total_servers.avail;
	     
	      total_servers.acquire(1);
	      
	      if size12 <=0 and controller then begin !!Checks if there is active tokens in res, and that the controller is working;
	      	timerd := time;
	      	test4 := true;  !!Indicate that the timer has started;
	      end;
	      
	      numberofservers := numberofservers - 1;
	      
	      hold(Trs);
	      
	      
	      if controller then begin !!If controller is working, release token to res;
	      total_servers.release(1);
	      numberofservers := numberofservers + 1;
	      end;
	      if not controller then begin !!If controller is not working, don't release token, but still update number of servers;
	      numberofservers := numberofservers + 1;
	      end;
              
              if test4 then timere := time; !If startet timer above, set aquire end-time;
              timerf := timere - timerd;
              totalFailTime := totalFailTime + timerf; !!Add the server downtime to the total system downtime;
	
        repeat;
        
    end;


    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Entity: ControllerFailure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ;
    Entity class ControllerFailure;
    begin
      integer size2;
      long real timea;
      long real timeb;
      long real timec;

      loop:
          controller := true; !!Controller is working;
          hold(controllerFailureIntensity_.sample);
	  controller := false; !!Controller is not working;

          size2 := total_servers.avail;
	  
	  timea := time; !!Start timer for controller-down;
          
          total_servers.acquire(size2); !!Take out all from res;

          hold(Trc);

          total_servers.release(numberofservers); !! Add back to res the numbers of active servers;

	  timeb := time; !!Stop time when controller is working;
	  timec := timeb - timea; !!The time the controller was down;
	  totalFailTime := totalFailTime + timec; !!Add the controller downtime to the total system downtime;
       
      repeat;
        
    end;


    !!!!!!!!!!!!!!!!!!!!!!!!! ;
    !!!! VARIABLE VALUES !!!! ;
    !!!!!!!!!!!!!!!!!!!!!!!!! ;


    !! Controller/Server Failure Intensity !! ;
    controllerFailureIntensity_ :- new NegExp("CFail", 0.01);
    serverFailureIntensity_ :- new NegExp("SFail", 0.01);
    

    !! Initiate number of servers !!;
    numberofservers := 3;

      
    total_servers :- new Res("Total servers", 3);

    !! Start Entities !! ;
    new ControllerFailure("CF1").schedule(0);
    new ServerFailure("SF1").schedule(0);
    new ServerFailure("SF2").schedule(0);
    new ServerFailure("SF3").schedule(0);

    !! Force Hold Simulation Active !! ;
    hold(5000000);
    totalTime := time;
    percentage_fail := (totalFailTime / totalTime);
    outtext ("Total runtime: ");
    outint (totalTime, 0);
    outimage;
    outtext ("Total time down: ");
    outint (totalFailTime, 0);
    outimage;
    outtext ("Percentage down: ");
    outint (percentage_fail, 0);
    outimage;
  end;
end;
